import { createArticleContent } from '../app/models/article';

async function seedArticleContent() {
  try {
    // 記事1の本文
    await createArticleContent('1', `
# Next.jsでモダンなWebアプリケーションを構築する

## はじめに

Next.jsは、Reactベースのフレームワークで、モダンなWebアプリケーションの開発に最適です。
この記事では、Next.jsを使用した開発の基本的な流れを解説します。

## 主な特徴

- サーバーサイドレンダリング
- 静的サイト生成
- ファイルベースのルーティング
- APIルートのサポート

## まとめ

Next.jsを使用することで、パフォーマンスの高いWebアプリケーションを効率的に開発できます。
`);

    // 記事2の本文
    await createArticleContent('2', `
# デザインシステムの構築と運用

## デザインシステムとは

デザインシステムは、製品開発におけるデザインの一貫性を保つための重要なツールです。
UIコンポーネント、ガイドライン、パターンなどを体系的にまとめています。

## 主要な要素

1. コンポーネントライブラリ
2. デザイントークン
3. ドキュメント
4. ガイドライン

## 実装のポイント

効果的なデザインシステムの実装には、以下の点に注意が必要です：

- チーム全体での合意形成
- 継続的なメンテナンス
- 使いやすさの重視
`);

    // 記事3の本文
    await createArticleContent('3', `
# 機械学習モデルの最適化テクニック

## はじめに

機械学習モデルの性能を最大限に引き出すには、適切な最適化が不可欠です。
この記事では、主要な最適化手法について解説します。

## 主なテクニック

1. ハイパーパラメータチューニング
2. クロスバリデーション
3. アンサンブル学習
4. 正則化

## 実践的なアプローチ

- データの前処理
- 特徴量エンジニアリング
- モデル選択
- 評価指標の選定

## まとめ

最適化は継続的なプロセスであり、常に改善の余地があります。
`);

    console.log('記事本文の追加が完了しました！');
  } catch (error) {
    console.error('エラーが発生しました:', error);
  }
}

seedArticleContent(); 